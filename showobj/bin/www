#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('showobj:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var cpu = {cpu:null,info:null};

var io = require('socket.io').listen(server);
io.sockets.on('connection', function (socket, pseudo) {
  // Quand un client se connecte, on lui envoie un message
  socket.emit('info', cpu.info);
  setInterval(function () {
    socket.emit('cpu', cpu.cpu);
  },1000);
  // // On signale aux autres clients qu'il y a un nouveau venu
  // socket.broadcast.emit('message', 'Un autre client vient de se connecter ! ');
  //
  // // Dès qu'on nous donne un pseudo, on le stocke en variable de session
  // socket.on('petit_nouveau', function(pseudo) {
  //   socket.pseudo = pseudo;
  // });
  //
  // // Dès qu'on reçoit un "message" (clic sur le bouton), on le note dans la console
  // socket.on('message', function (message) {
  //   // On récupère le pseudo de celui qui a cliqué dans les variables de session
  //   console.log(socket.pseudo + ' me parle ! Il me dit : ' + message);
  // });
});

//
// server TCP
//

var net = require("net"),
    PassThroughStream = require('stream').PassThrough,
    stream = new PassThroughStream();

function getRandomArbitrary(min, max) {
  return Math.random() * (max - min) + min;
}

var servertcp = net.createServer(function(socket) {
  console.log('server connected');
  
  socket.on('data', function (data) {
    cpu = JSON.parse(data.toString());
    console.log(cpu);
    //socket.write('merci. Est-ce bien ceci ? ' + data.toString() );
    socket.write('suivant')
  });
  socket.write('Salut!');
  socket.on('end', function() {
    console.log('client disconnected');
  });
});


servertcp.listen(8080, function() {
  console.log('server is listening');
});
